<?php
/* DO NOT edit this file - Configure your environment in config/ */
P3App::boot();

final class P3App 
{
	public static function boot()
	{
		self::preinitialize();
		self::pick_boot()->run();
	}

	public static function is_vendor_p3()
	{
		return file_exists(P3\ROOT.'/vendor/p3');
	}

	public static function pick_boot()
	{
		$boot = self::is_vendor_p3() ? 'VendorBoot' : 'PearBoot';

		return new $boot;
	}

	public static function preinitialize()
	{
		if(file_exists(self::preinitializer_path()))
			require(self::preinitializer_path());
	}

	public static function preinitializer_path()
	{
		return P3\ROOT.'/config/preinitializer.php';
	}
}

abstract class Boot
{
	// Strict standards doesn't like this... whee!  TODO: Use interface on Boot models
	//abstract public static function load_initializer();

	final public static function run()
	{
		/* TODO: Estrapulate framework to allow easy project generation and multiple boot patterns(Vendor, Pear, etc) */
		require(P3\ROOT.'/vendor/p3/p3.php');
		P3::boot();
		//static::load_initializer();  head hurts.... waiting till p3 is further along
	}
}

final class VendorBoot extends Boot
{
	public static function load_initializer()
	{
		require P3\ROOT.'/vendor/p3/p3ties/initializer.php';
	}
}

?>